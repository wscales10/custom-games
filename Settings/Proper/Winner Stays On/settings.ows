settings
{
	lobby
	{
		Allow Players Who Are In Queue: Yes
		Match Voice Chat: Enabled
		Max FFA Players: 8
		Return To Lobby: Never
	}

	modes
	{
		Deathmatch
		{
			enabled maps
			{
				Castillo
				Workshop Island
			}
		}

		General
		{
			Game Mode Start: Immediately
			Spawn Health Packs: Disabled
		}
	}
}

variables
{
	global:
		11: LastToLeave

	player:
		8: WasInactive
		13: NotNew
}

rule("Add new players to round")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.NotNew == False;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		If(Global.G == 1);
			Modify Global Variable(A, Append To Array, Event Player);
		End;
		Event Player.NotNew = True;
	}
}

rule("Queue")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Array Contains(Global.A, Event Player) == False;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Abort If(Array Contains(Global.Q, Event Player));
		Abort If(!Event Player.NotNew);
		Modify Global Variable(Q, Append To Array, Event Player);
	}
}

rule("Global Setup")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Q = Empty Array;
		Global.A = Empty Array;
		Create HUD Text(Filtered Array(All Players(All Teams), Count Of(Global.A) >= 1), String("{0} {1}", Hero Icon String(Hero Of(
			First Of(Global.A))), First Of(Global.A)), Null, Null, Left, 0, White, White, White, Visible To and String,
			Default Visibility);
		Disable Built-In Game Mode Scoring;
		Create HUD Text(Host Player, Global.G, Null, Null, Right, 0, Green, White, White, Visible To and String, Default Visibility);
	}
}

rule("Player Setup")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Disable Built-In Game Mode Respawning(Event Player);
		Enable Death Spectate All Players(Event Player);
		Create HUD Text(Filtered Array(Event Player, Array Contains(Global.Q, Event Player) && Count Of(Global.A) + Global.Q >= 2),
			Custom String("Position in Queue: {0}", Index Of Array Value(Global.Q, Event Player) + 1), Null, Null, Top, 0, White, White,
			White, Visible To and String, Default Visibility);
	}
}

disabled rule("Freeze")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
		Array Contains(Global.A, Event Player) == False;
	}

	actions
	{
		Wait(1, Abort When False);
		Set Status(Event Player, Null, Phased Out, 9999);
		Set Invisible(Event Player, All);
		Set Ability 1 Enabled(Event Player, False);
		Set Ability 2 Enabled(Event Player, False);
		Set Ultimate Ability Enabled(Event Player, False);
		Start Forcing Throttle(Event Player, 0, 0, 0, 0, 0, 0);
		Set Primary Fire Enabled(Event Player, False);
		Set Secondary Fire Enabled(Event Player, False);
		Set Damage Dealt(Event Player, 0);
	}
}

rule("Round End")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Count Of(Global.A) <= 1;
		Global.G == 1;
	}

	actions
	{
		Wait(1, Abort When False);
		Global.G = 2;
		Set Slow Motion(50);
		If(Count Of(Global.A) == 1 && !Global.LastToLeave.WasInactive);
			Modify Player Score(Global.A, 1);
			Big Message(All Players(All Teams), Custom String("{0} Wins", Global.A));
		Else;
			Big Message(All Players(All Teams), String("Draw"));
		End;
		Wait(1, Ignore Condition);
		Global.G = 0;
		Set Slow Motion(100);
	}
}

rule("Init Round")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.G == 0;
		Count Of(Global.A) + Count Of(Global.Q) >= 2;
	}

	actions
	{
		Wait(1, Abort When False);
		Set Slow Motion(100);
		If(Count Of(Global.A) == 0);
			Global.A = Global.Q;
		Else;
			Modify Global Variable(A, Append To Array, Array Slice(Global.Q, 0, 2 - Count Of(Global.A)));
		End;
		Global.G = 1;
		Global.I = False;
	}
}

rule("Player Died")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Global.G == 1;
	}

	actions
	{
		Global.LastToLeave = Event Player;
		Modify Global Variable(A, Remove From Array By Value, Event Player);
	}
}

rule("Player Left")
{
	event
	{
		Player Left Match;
		All;
		All;
	}

	actions
	{
		Global.LastToLeave = Event Player;
		Modify Global Variable(A, Remove From Array By Value, Event Player);
		Modify Global Variable(Q, Remove From Array By Value, Event Player);
	}
}

rule("Round Start")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.G == 1;
	}

	actions
	{
		Event Player.WasInactive = False;
		If(Array Contains(Global.A, Event Player));
			Respawn(Event Player);
			disabled Clear Status(Event Player, Phased Out);
			disabled Set Invisible(Event Player, None);
			disabled Set Ability 1 Enabled(Event Player, True);
			disabled Set Ability 2 Enabled(Event Player, True);
			disabled Set Ultimate Ability Enabled(Event Player, True);
			disabled Stop Forcing Throttle(Event Player);
			disabled Set Primary Fire Enabled(Event Player, True);
			disabled Set Secondary Fire Enabled(Event Player, True);
			disabled Set Damage Dealt(Event Player, 100);
		End;
	}
}

disabled rule("Bots")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Button Held(Host Player, Interact) == True;
	}

	actions
	{
		Create Dummy Bot(Random Value In Array(All Heroes), All Teams, -1, Host Player, Facing Direction Of(Host Player));
		Create Dummy Bot(Random Value In Array(All Heroes), All Teams, -1, Host Player, Facing Direction Of(Host Player));
		Create Dummy Bot(Random Value In Array(All Heroes), All Teams, -1, Host Player, Facing Direction Of(Host Player));
	}
}

rule("Player Setup")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Create HUD Text(Filtered Array(All Players(All Teams), Array Contains(Array Slice(Global.A, 1, Count Of(Global.A) - 1),
			Event Player)), String("{0} {1}", Hero Icon String(Hero Of(Event Player)), Event Player), Null, Null, Right, 0, White, White,
			White, Visible To and String, Default Visibility);
	}
}

disabled rule("Host Kill")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Button Held(Host Player, Interact) == True;
	}

	actions
	{
		Kill(Random Value In Array(Global.A), Host Player);
	}
}

rule("Remove from Queue")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Array Contains(Global.A, Event Player) == True;
	}

	actions
	{
		Modify Global Variable(Q, Remove From Array By Value, Event Player);
	}
}

rule("Hero Select")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		Set Match Time(10);
	}
}

rule("Hello")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is True For Any(Remove From Array(All Players(All Teams), Event Player), Is Communicating(Current Array Element, Hello)
			&& Distance Between(Event Player, Current Array Element) < 6) == True;
	}

	actions
	{
		Wait(0.750, Ignore Condition);
		Communicate(Event Player, Hello);
	}
}

rule("Inactivity")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.G == 1;
		Speed Of(Event Player) < 0.500;
		Array Contains(Global.A, Event Player) == True;
	}

	actions
	{
		Wait(10, Abort When False);
		Small Message(Event Player, Custom String("{0}  If you remain inactive you will be removed from the game  {0}", Icon String(
			Warning)));
		Wait(5, Abort When False);
		Event Player.WasInactive = True;
		Kill(Event Player, Null);
		Small Message(Event Player, Custom String("You were removed from the game due to inactivity"));
		Small Message(Remove From Array(All Players(All Teams), Event Player), Custom String(
			"{0} was removed from the game due to inactivity", Event Player));
	}
}

rule("Rule 18")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Count Of(Global.A) + Count Of(Global.Q) >= 2;
	}

	actions
	{
		Disable Built-In Game Mode Respawning(Event Player);
	}
}

rule("Rule 18")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Count Of(Global.A) + Count Of(Global.Q) < 2;
	}

	actions
	{
		Enable Built-In Game Mode Respawning(Event Player);
	}
}