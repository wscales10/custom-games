settings
{
	modes
	{
		Control

		Escort

		Flashpoint

		Hybrid

		Push
	}
}

variables
{
	global:
		0: Alphabet
		1: CharacterWidths

	player:
		0: CameraPos
		1: CameraDirection
		2: HudOrigin
		3: iHUD
		4: jHUD
		5: HudDistance
		6: StringPositionsInWorld
		7: FullStrings
		8: StringSlices
		9: SliceLength
		10: i
		11: j
		12: StringWidthsInPixels
		13: StringScales
		14: StringHudPositions
		15: StringColours
}

rule("Rule 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Event Player.CameraPos = Eye Position(Event Player);
		Event Player.CameraDirection = Facing Direction Of(Event Player);
		Event Player.HudDistance = 3;
		Event Player.HudOrigin = Event Player.CameraPos + Event Player.HudDistance * Event Player.CameraDirection;
		Event Player.iHUD = 2.489 * Event Player.HudDistance * Direction From Angles(Horizontal Angle From Direction(
			Event Player.CameraDirection) - 90, 0);
		Event Player.jHUD = 1.400 * Event Player.HudDistance * Direction From Angles(Horizontal Angle From Direction(
			Event Player.CameraDirection), Vertical Angle From Direction(Event Player.CameraDirection) - 90);
	}
}

rule("Rule 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Event Player.FullStrings = Array(Custom String("HANZO"), Custom String("ABCDEFGHIJKLMNOPQRSTUVWXYZ"));
		Event Player.StringScales = Array(1.400, 1.400);
		Event Player.StringColours = Array(Color(Yellow), Color(White));
		Event Player.StringHudPositions = Array(Vector(-0.280, -0.350, 0), Vector(-0.280, -0.388, 0));
		Start Camera(Event Player, Event Player.CameraPos, Event Player.CameraPos + Event Player.CameraDirection, 25);
		For Player Variable(Event Player, j, 0, Count Of(Event Player.FullStrings), 1);
			Create In-World Text(Event Player, Event Player.StringSlices[Evaluate Once(Event Player.j)],
				Event Player.StringPositionsInWorld[Evaluate Once(Event Player.j)], Event Player.StringScales[Event Player.j], Do Not Clip,
				Visible To Position and String, Event Player.StringColours[Event Player.j], Default Visibility);
		End;
		Create In-World Text(Event Player, Hero Icon String(Hero Of(Event Player)),
			Event Player.HudOrigin + -0.315 * Event Player.iHUD + -0.400 * Event Player.jHUD, 4, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		Disable Hero HUD(Event Player);
		Create Beam Effect(Event Player, Grapple Beam, Event Player.HudOrigin - 0.350 * Event Player.iHUD - 0.300 * Event Player.jHUD,
			Event Player.HudOrigin - 0.350 * Event Player.iHUD - 0.500 * Event Player.jHUD, Color(White), Visible To Position and Radius);
		Create Beam Effect(Event Player, Grapple Beam, Event Player.HudOrigin + 0.350 * Event Player.iHUD - 0.300 * Event Player.jHUD,
			Event Player.HudOrigin + 0.350 * Event Player.iHUD - 0.500 * Event Player.jHUD, Color(White), Visible To Position and Radius);
		Create Beam Effect(Event Player, Grapple Beam, Event Player.HudOrigin - 0.350 * Event Player.iHUD - 0.300 * Event Player.jHUD,
			Event Player.HudOrigin + 0.350 * Event Player.iHUD - 0.300 * Event Player.jHUD, Color(White), Visible To Position and Radius);
	}
}

rule("Rule 3")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Alphabet = Custom String("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
		Global.CharacterWidths = Array(8.117, 7.750, 7.933, 8.117, 6.983, 6.767, 7.983, 8.183, 3.650, 7.167, 7.850, 6.550, 10.383, 8.550,
			8.100, 7.750, 8.100, 7.983, 7.383, 7.083, 8.167, 7.883, 11.850, 7.983, 7.617, 7.183);
	}
}

rule("Rule 4")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
	}

	actions
	{
		Event Player.SliceLength += 1;
		For Player Variable(Event Player, j, 0, Count Of(Event Player.FullStrings), 1);
			Event Player.StringSlices[Event Player.j] = Event Player.j == 1 ? String Slice(Event Player.FullStrings[1], 0,
				Event Player.SliceLength) : Event Player.FullStrings[Event Player.j];
			Event Player.StringWidthsInPixels[Event Player.j] = 0;
			For Player Variable(Event Player, i, 0, String Length(Event Player.StringSlices[Event Player.j]), 1);
				Event Player.StringWidthsInPixels[Event Player.j] += Global.CharacterWidths[Index Of String Char(Global.Alphabet, Char In String(
					Event Player.StringSlices[Event Player.j], Event Player.i))] * Event Player.StringScales[Event Player.j];
			End;
			Event Player.StringPositionsInWorld[Event Player.j] = Event Player.HudOrigin + X Component Of(
				Event Player.StringHudPositions[Event Player.j]) * Event Player.iHUD + Y Component Of(
				Event Player.StringHudPositions[Event Player.j])
				* Event Player.jHUD + Event Player.StringWidthsInPixels[Event Player.j] / 2 / 1360 * Event Player.iHUD;
		End;
	}
}