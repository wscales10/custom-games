settings
{
	modes
	{
		Control
		{
			Limit Roles: 1 Tank 2 Offense 2 Support
		}

		Escort
		{
			Limit Roles: 1 Tank 2 Offense 2 Support
		}

		Flashpoint
		{
			Limit Roles: 1 Tank 2 Offense 2 Support
		}

		Hybrid
		{
			Limit Roles: 1 Tank 2 Offense 2 Support
		}

		Push
		{
			Limit Roles: 1 Tank 2 Offense 2 Support
		}
	}
}

variables
{
	global:
		0: Alphabet
		1: CharacterWidths

	player:
		0: CameraPos
		1: CameraDirection
		2: HudOrigin
		3: iHUD
		4: jHUD
		5: HudDistance
		6: StringPosition
		7: FullString
		8: StringSlice
		9: SliceLength
		10: i
		11: StringWidthInPixels
}

rule("Rule 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Event Player.CameraPos = Eye Position(Event Player);
		Event Player.CameraDirection = Facing Direction Of(Event Player);
		Event Player.HudDistance = 1;
		Event Player.HudOrigin = Event Player.CameraPos + Event Player.HudDistance * Event Player.CameraDirection;
		Event Player.iHUD = 2.489 * Event Player.HudDistance * Direction From Angles(Horizontal Angle From Direction(
			Event Player.CameraDirection) - 90, 0);
		Event Player.jHUD = 1.400 * Event Player.HudDistance * Direction From Angles(Horizontal Angle From Direction(
			Event Player.CameraDirection), Vertical Angle From Direction(Event Player.CameraDirection) - 90);
	}
}

rule("Rule 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Event Player.FullString = Custom String("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
		Start Camera(Event Player, Event Player.CameraPos, Event Player.CameraPos + Event Player.CameraDirection, 25);
		Create In-World Text(All Players(All Teams), Event Player.StringSlice, Event Player.StringPosition, 3, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		Create In-World Text(All Players(All Teams), Custom String("O"),
			Event Player.HudOrigin + -0.500 * Event Player.iHUD + 0 * Event Player.jHUD, 1, Do Not Clip, Visible To Position and String,
			Color(White), Default Visibility);
		Create In-World Text(All Players(All Teams), Custom String("O"),
			Event Player.HudOrigin + 0 * Event Player.iHUD + 0.250 * Event Player.jHUD, 1, Do Not Clip, Visible To Position and String,
			Color(White), Default Visibility);
	}
}

rule("Rule 3")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Alphabet = Custom String("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
		Global.CharacterWidths = Array(26, 23, 24, 25, 21, 20, 24, 24, 10, 23, 23, 20, 31, 25, 25, 23, 25, 23, 22, 22, 23, 25, 34, 24, 24,
			21);
	}
}

rule("Rule 4")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
	}

	actions
	{
		Event Player.SliceLength += 1;
		Event Player.StringSlice = String Slice(Event Player.FullString, 0, Event Player.SliceLength);
		Event Player.StringWidthInPixels = 0;
		For Player Variable(Event Player, i, 0, Event Player.SliceLength, 1);
			Event Player.StringWidthInPixels += Global.CharacterWidths[Index Of String Char(Global.Alphabet, Char In String(
				Event Player.StringSlice, Event Player.i))];
		End;
		Event Player.StringPosition = Event Player.HudOrigin + Event Player.StringWidthInPixels / 2 / 1360 * Event Player.iHUD;
	}
}