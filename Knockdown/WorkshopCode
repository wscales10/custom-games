rule("Setup")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Set Status(Event Player, Null, Unkillable, 9999);
		Set Player Variable(Event Player, G, Empty Array);
		Chase Player Variable At Rate(Event Player, T, 0, 1, None);
		Set Player Variable(Event Player, W, Empty Array);
		Set Player Variable(Event Player, Y, Empty Array);
		Set Player Variable(Event Player, Z, 1);
	}
}

rule("Knock Down when health reaches 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Health(Event Player) == 1;
	}

	actions
	{
		Abort If(Has Status(Event Player, Knocked Down));
		Set Status(Event Player, Null, Knocked Down, 9999);
	}
}

rule("Revive")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Health(Event Player) >= Multiply(0.300, Player Variable(Event Player, M));
		Has Status(Event Player, Knocked Down) == True;
	}

	actions
	{
		Clear Status(Event Player, Knocked Down);
		Clear Status(Event Player, Hacked);
	}
}

rule("Tea")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Crouching(Event Player) == True;
		Is True For Any(All Players(Opposite Team Of(Team Of(Event Player))), And(And(Has Status(Current Array Element, Knocked Down),
			Is Alive(Current Array Element)), Compare(Distance Between(Event Player, Current Array Element), <=, 1.500))) == True;
	}

	actions
	{
		Set Player Variable(Event Player, N, Filtered Array(All Players(Opposite Team Of(Team Of(Event Player))), And(Has Status(
			Current Array Element, Knocked Down), Compare(Distance Between(Event Player, Current Array Element), <=, 1.500))));
		Modify Player Variable(Player Variable(Event Player, N), G, Append To Array, Event Player);
	}
}

rule("Limit Health to 200%")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Health(Event Player) > Multiply(2, Player Variable(Event Player, M));
	}

	actions
	{
		Damage(Event Player, Null, Subtract(Health(Event Player), Multiply(2, Player Variable(Event Player, M))));
	}
}

rule("Oh No")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Count Of(Player Variable(Event Player, G)) > 0;
	}

	actions
	{
		Set Player Variable(Event Player, O, First Of(Player Variable(Event Player, G)));
		Set Player Variable(Event Player, U, Min(Ultimate Charge Percent(Event Player), Min(Subtract(100, Ultimate Charge Percent(
			Player Variable(Event Player, O))), 2.750)));
		Set Ultimate Charge(Event Player, Subtract(Ultimate Charge Percent(Event Player), Player Variable(Event Player, U)));
		Set Ultimate Charge(Player Variable(Event Player, O), Add(Ultimate Charge Percent(Player Variable(Event Player, O)),
			Player Variable(Event Player, U)));
		Set Player Variable(Event Player, H, Min(Subtract(Multiply(Player Variable(Event Player, Z), Player Variable(Event Player, M)),
			Multiply(0.200, Player Variable(Event Player, M))), Min(Subtract(Multiply(2, Player Variable(Player Variable(Event Player, O),
			M)), Max Health(Player Variable(Event Player, O))), 3)));
		Set Player Variable(Event Player, X, Subtract(Max Health(Event Player), Player Variable(Event Player, H)));
		Set Player Variable(Player Variable(Event Player, O), X, Add(Max Health(Player Variable(Event Player, O)), Player Variable(
			Event Player, H)));
		Modify Player Variable(Event Player, G, Remove From Array By Index, 0);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Update Raw Max Health")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Hero Of(Event Player) != Player Variable(Event Player, E);
	}

	actions
	{
		Set Max Health(Event Player, 100);
		Wait(0.016, Ignore Condition);
		Set Player Variable(Event Player, X, 0);
		Set Player Variable(Event Player, M, Max Health(Event Player));
		Set Player Variable(Event Player, E, Hero Of(Event Player));
	}
}

rule("Remove Unkillable Status")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, T) == 0;
	}

	actions
	{
		Abort If(Not(Has Status(Event Player, Knocked Down)));
		Clear Status(Event Player, Unkillable);
		Set Player Variable(Event Player, D, True);
	}
}

rule("Emote = Heal")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating Any Emote(Event Player) == True;
		Is True For Any(All Players(Opposite Team Of(Team Of(Event Player))), And(And(Has Status(Current Array Element, Knocked Down),
			Is Alive(Current Array Element)), Compare(Distance Between(Event Player, Current Array Element), <=, 1.500))) == True;
	}

	actions
	{
		Heal(Event Player, Null, 0.250);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Kill")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, D) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Kill(Event Player, Player Variable(Event Player, K));
		Wait(0.016, Abort When False);
		Loop If Condition Is True;
		Set Status(Event Player, Null, Unkillable, 9999);
	}
}

rule("Set Max Health")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Max Health(Event Player) != Player Variable(Event Player, X);
		Has Spawned(Event Player) == True;
		Player Variable(Event Player, X) != 0;
		Hero Of(Event Player) == Player Variable(Event Player, E);
	}

	actions
	{
		Set Player Variable(Event Player, A, Health(Event Player));
		Set Max Health(Event Player, Multiply(100, Divide(Player Variable(Event Player, X), Player Variable(Event Player, M))));
		Wait(0.016, Ignore Condition);
		Heal(Event Player, Null, Subtract(Player Variable(Event Player, A), Health(Event Player)));
		Damage(Event Player, Null, Subtract(Health(Event Player), Player Variable(Event Player, A)));
		Set Player Variable(Event Player, X, 0);
	}
}

rule("Destroy In-World Text")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Or(Is Dead(Event Player), Not(Has Status(Event Player, Knocked Down))) == True;
		Count Of(Player Variable(Event Player, W)) > 0;
	}

	actions
	{
		Destroy In-World Text(First Of(Player Variable(Event Player, W)));
		Wait(0.016, Ignore Condition);
		Modify Player Variable(Event Player, W, Remove From Array By Index, 0);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Destroy HUD Text")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Or(Is Dead(Event Player), Not(Has Status(Event Player, Knocked Down))) == True;
		Count Of(Player Variable(Event Player, Y)) > 0;
	}

	actions
	{
		Destroy HUD Text(First Of(Player Variable(Event Player, Y)));
		Wait(0.016, Ignore Condition);
		Modify Player Variable(Event Player, Y, Remove From Array By Index, 0);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Is Dead")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dead(Event Player) == True;
	}

	actions
	{
		Set Player Variable(Event Player, D, False);
		Set Player Variable(Event Player, K, Null);
	}
}

rule("Last Attacker")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Health(Victim) == 1;
	}

	actions
	{
		Set Player Variable(Victim, K, Attacker);
	}
}

rule("When Knocked Down")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Status(Event Player, Knocked Down) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Hacked, 10);
		Set Player Variable(Event Player, T, 10);
		Create In-World Text(Remove From Array(All Players(All Teams), Event Player), Player Variable(Event Player, T), Add(Position Of(
			Event Player), Up), 2, Clip Against Surfaces, Visible To Position and String, Red, Default Visibility);
		Modify Player Variable(Event Player, W, Append To Array, Last Text ID);
		Create HUD Text(Event Player, Player Variable(Event Player, T), Null, Null, Top, 0, Red, White, White, Visible To and String,
			Default Visibility);
		Modify Player Variable(Event Player, Y, Append To Array, Last Text ID);
	}
}
