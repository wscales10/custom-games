settings
{
	lobby
	{
		Max Team 1 Players: 4
		Max Team 2 Players: 4
	}

	modes
	{
		Team Deathmatch
		{
			disabled maps
			{
				Black Forest Winter
				Blizzard World Winter
				ChÃ¢teau Guillard Halloween
				Ecopoint: Antarctica Winter
				Eichenwalde Halloween
				Hanamura Winter
				Hollywood Halloween
				King's Row Winter
				Lijiang Control Center Lunar New Year
				Lijiang Garden Lunar New Year
				Lijiang Night Market Lunar New Year
				Workshop Chamber
				Workshop Expanse
				Workshop Island
			}
		}
	}
}

variables
{
	player:
		0: CachedHealth
		1: MaxHealthModifier
		3: ShouldDieNow
		4: Hero
		6: Teabaggers
		7: HealthToGiveAway
		10: LastAttacker
		12: BaseMaxHealth
		13: TeabagVictims
		14: CurrentTeabagger
		19: TimeUntilDeath
		20: UltChargeToGiveAway
		22: InWorldTexts
		23: DesiredMaxHealth
		24: HUDTexts
}

subroutines
{
	0: SetMaxHealth
}

rule("Setup")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Set Status(Event Player, Null, Unkillable, 9999);
		Event Player.Teabaggers = Empty Array;
		Chase Player Variable At Rate(Event Player, TimeUntilDeath, 0, 1, None);
		Event Player.InWorldTexts = Empty Array;
		Event Player.HUDTexts = Empty Array;
		Event Player.MaxHealthModifier = 1;
	}
}

rule("Knock Down when health reaches 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Health(Event Player) == 1;
	}

	actions
	{
		Abort If(Has Status(Event Player, Knocked Down));
		Set Status(Event Player, Null, Knocked Down, 9999);
	}
}

rule("Revive")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Health(Event Player) >= 0.300 * Event Player.BaseMaxHealth;
		Has Status(Event Player, Knocked Down) == True;
	}

	actions
	{
		Clear Status(Event Player, Knocked Down);
		Clear Status(Event Player, Hacked);
	}
}

rule("Tea")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Crouching(Event Player) == True;
		Is True For Any(All Players(Opposite Team Of(Team Of(Event Player))), Has Status(Current Array Element, Knocked Down) && Is Alive(
			Current Array Element) && Distance Between(Event Player, Current Array Element) <= 1.500) == True;
	}

	actions
	{
		Event Player.TeabagVictims = Filtered Array(All Players(Opposite Team Of(Team Of(Event Player))), Has Status(Current Array Element,
			Knocked Down) && Distance Between(Event Player, Current Array Element) <= 1.500);
		Modify Player Variable(Event Player.TeabagVictims, Teabaggers, Append To Array, Event Player);
	}
}

rule("Limit Health to 200%")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Health(Event Player) > 2 * Event Player.BaseMaxHealth;
	}

	actions
	{
		Damage(Event Player, Null, Health(Event Player) - 2 * Event Player.BaseMaxHealth);
	}
}

rule("Oh No")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Count Of(Event Player.Teabaggers) > 0;
	}

	actions
	{
		Event Player.CurrentTeabagger = First Of(Event Player.Teabaggers);
		Event Player.UltChargeToGiveAway = Min(Ultimate Charge Percent(Event Player), Min(100 - Ultimate Charge Percent(
			Event Player.CurrentTeabagger), 2.750));
		Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) - Event Player.UltChargeToGiveAway);
		Set Ultimate Charge(Event Player.CurrentTeabagger, Ultimate Charge Percent(Event Player.CurrentTeabagger)
			+ Event Player.UltChargeToGiveAway);
		Event Player.HealthToGiveAway = Max(0, Min((Event Player.MaxHealthModifier - 0.350) * Event Player.BaseMaxHealth, Min(
			2 * Event Player.CurrentTeabagger.BaseMaxHealth - Max Health(Event Player.CurrentTeabagger), 3)));
		Event Player.DesiredMaxHealth = Max Health(Event Player) - Event Player.HealthToGiveAway;
		Event Player.CurrentTeabagger.DesiredMaxHealth = Max Health(Event Player.CurrentTeabagger) + Event Player.HealthToGiveAway;
		Modify Player Variable(Event Player, Teabaggers, Remove From Array By Index, 0);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Update Raw Max Health")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Hero Of(Event Player) != Event Player.Hero;
	}

	actions
	{
		Event Player.MaxHealthModifier = 1;
		Call Subroutine(SetMaxHealth);
		Wait(0.016, Ignore Condition);
		Event Player.DesiredMaxHealth = 0;
		Event Player.BaseMaxHealth = Max Health(Event Player);
		Event Player.Hero = Hero Of(Event Player);
	}
}

rule("Remove Unkillable Status")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.TimeUntilDeath == 0;
	}

	actions
	{
		Abort If(!Has Status(Event Player, Knocked Down));
		Clear Status(Event Player, Unkillable);
		Event Player.ShouldDieNow = True;
	}
}

rule("Emote = Heal")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating Any Emote(Event Player) == True;
		Is True For Any(All Players(Opposite Team Of(Team Of(Event Player))), Has Status(Current Array Element, Knocked Down) && Is Alive(
			Current Array Element) && Distance Between(Event Player, Current Array Element) <= 1.500) == True;
	}

	actions
	{
		Heal(Event Player, Null, 0.250);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Kill")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ShouldDieNow == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Kill(Event Player, Event Player.LastAttacker);
		Wait(0.016, Abort When False);
		Loop If Condition Is True;
		Set Status(Event Player, Null, Unkillable, 9999);
	}
}

rule("Set Max Health")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Max Health(Event Player) != Event Player.DesiredMaxHealth;
		Has Spawned(Event Player) == True;
		Event Player.DesiredMaxHealth != 0;
		Hero Of(Event Player) == Event Player.Hero;
	}

	actions
	{
		Event Player.CachedHealth = Health(Event Player);
		Event Player.MaxHealthModifier = Event Player.DesiredMaxHealth / Event Player.BaseMaxHealth;
		Call Subroutine(SetMaxHealth);
		Wait(0.016, Ignore Condition);
		Heal(Event Player, Null, Event Player.CachedHealth - Health(Event Player));
		Damage(Event Player, Null, Health(Event Player) - Event Player.CachedHealth);
		Event Player.DesiredMaxHealth = 0;
	}
}

rule("Destroy In-World Text")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Is Dead(Event Player) || !Has Status(Event Player, Knocked Down)) == True;
		Count Of(Event Player.InWorldTexts) > 0;
	}

	actions
	{
		Destroy In-World Text(First Of(Event Player.InWorldTexts));
		Wait(0.016, Ignore Condition);
		Modify Player Variable(Event Player, InWorldTexts, Remove From Array By Index, 0);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Destroy HUD Text")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Is Dead(Event Player) || !Has Status(Event Player, Knocked Down)) == True;
		Count Of(Event Player.HUDTexts) > 0;
	}

	actions
	{
		Destroy HUD Text(First Of(Event Player.HUDTexts));
		Wait(0.016, Ignore Condition);
		Modify Player Variable(Event Player, HUDTexts, Remove From Array By Index, 0);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Is Dead")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dead(Event Player) == True;
	}

	actions
	{
		Event Player.ShouldDieNow = False;
		Event Player.LastAttacker = Null;
	}
}

rule("Last Attacker")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Health(Victim) == 1;
	}

	actions
	{
		Victim.LastAttacker = Attacker;
	}
}

rule("When Knocked Down")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Status(Event Player, Knocked Down) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Hacked, 10);
		Event Player.TimeUntilDeath = 10;
		Create In-World Text(Remove From Array(All Players(All Teams), Event Player), Event Player.TimeUntilDeath, Position Of(
			Event Player) + Up, 2, Clip Against Surfaces, Visible To Position and String, Color(Red), Default Visibility);
		Modify Player Variable(Event Player, InWorldTexts, Append To Array, Last Text ID);
		Create HUD Text(Event Player, Event Player.TimeUntilDeath, Null, Null, Top, 0, Color(Red), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, HUDTexts, Append To Array, Last Text ID);
	}
}